<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on RC Kanashii&#39;s Blog</title>
		<link>https://rc-kanashii.top/posts/</link>
		<description>Recent content in Posts on RC Kanashii&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 21 Apr 2023 16:39:00 +0800</lastBuildDate>
		<atom:link href="https://rc-kanashii.top/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>JavaScript如何获取一个64位整数的高32位和低32位</title>
			<link>https://rc-kanashii.top/posts/javascript%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA64%E4%BD%8D%E6%95%B4%E6%95%B0%E7%9A%84%E9%AB%9832%E4%BD%8D%E5%92%8C%E4%BD%8E32%E4%BD%8D/</link>
			<pubDate>Fri, 21 Apr 2023 16:39:00 +0800</pubDate>
			
			<guid>https://rc-kanashii.top/posts/javascript%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA64%E4%BD%8D%E6%95%B4%E6%95%B0%E7%9A%84%E9%AB%9832%E4%BD%8D%E5%92%8C%E4%BD%8E32%E4%BD%8D/</guid>
			<description>背景 最近有个朋友问我如何在JavaScript中获取一个64位整数的高32位和低32位。由于我对JavaScript不是很了解，于是我打算先</description>
			<content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>最近有个朋友问我如何在JavaScript中获取一个64位整数的高32位和低32位。由于我对JavaScript不是很了解，于是我打算先用C++写一遍，再移植到JavaScript，心想这不是分分钟搞定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">12345678901234</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="n">low</span> <span class="o">=</span> <span class="n">num</span> <span class="o">&amp;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="n">high</span> <span class="o">=</span> <span class="p">(</span><span class="n">num</span> <span class="o">&gt;&gt;</span> <span class="mi">32</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;low = &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">low</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;high = &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">high</span><span class="p">;</span>
</span></span></code></pre></div><p>输出结果是：</p>
<pre tabindex="0"><code>low = 2249056121
high = 28744
</code></pre><p>我用进制转换器验证了一下，答案是正确的，于是赶紧用JavaScript重写一遍：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">12345678901234</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">low</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">&amp;</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">high</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&gt;&gt;</span> <span class="mi">32</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`low = </span><span class="si">${</span><span class="nx">low</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`high = </span><span class="si">${</span><span class="nx">high</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span></code></pre></div><p>输出结果是：</p>
<pre tabindex="0"><code>low = -2045911175
high = -2045911175
</code></pre><p>这就很奇怪了，高32位和低32位怎么可能是一样的，而且怎么可能是负数？</p>
<h2 id="涉及到的问题">涉及到的问题</h2>
<h3 id="number精度"><code>Number</code>精度</h3>
<p>JavaScript常用的表示数字的类型<code>Number</code>，本质上是<strong>双精度浮点数</strong>，类似C/C++和Java等语言中的<code>double</code>。<a href="https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8">双精度浮点数的编码规则</a>大致如下：</p>
<p><img src="/img/20230421/1.png" alt="" title="双精度浮点数的编码规则"></p>
<p>可以看到只有52的bit是用来表示尾数的，注意到尾数的最前面还有一个隐藏的1bit表示小数点前面的1，因此JavaScript的<strong>最大安全整数</strong>是<code>2^53 - 1</code>，具体解析可以查看<a href="https://juejin.cn/post/6880143057930190855">这篇回答</a>。</p>
<p>由此可知JavaScript的<code>Number</code>类型虽然有64位，但是真正用来表示尾数的部分只有52位，因此无法真正地实现其他语言（如C/C++和Java）的<code>long</code>类型，除非使用字符串、数组或者<code>BigInt</code>（当然这是另外的话题，本文章不会涉及）。</p>
<h3 id="位运算符的陷阱">位运算符的陷阱</h3>
<p>在JavaScript中，虽然<code>Number</code>类型是64位，但是当进行位运算（如<code>&amp;</code>、<code>|</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code>等）时，左右操作数首先会被<strong>强制转换为32位整数</strong>，这意味着超过32位的高位部分将会直接被截断。这在<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift#description">此处</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion">此处</a>有被提及：</p>
<blockquote>
<p>It first coerces both operands to numeric values and tests the types of them. It performs BigInt right shift if both operands becomes BigInts; otherwise, it converts both operands to 32-bit integers and performs number right shift.</p>
</blockquote>
<blockquote>
<p>Bitwise operators always convert the operands to 32-bit integers.</p>
</blockquote>
<p>这意味着如果要获取一个数的高32位，不能直接使用位运算符，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">high</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&gt;&gt;</span> <span class="mi">32</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="mi">1</span>
</span></span></code></pre></div><p>而应该先做除法，再做位运算：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">high</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">**</span> <span class="mi">32</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="mi">1</span>
</span></span></code></pre></div><h3 id="位移运算符的陷阱">位移运算符的陷阱</h3>
<p>不同于C++只有左移运算符<code>&lt;&lt;</code>、右移运算符<code>&gt;&gt;</code>，JavaScript中还有无符号右移运算符<code>&gt;&gt;&gt;</code>。其中JavaScript的<code>&gt;&gt;</code>表示算术右移，即带有符号位的右移，而<code>&gt;&gt;&gt;</code>表示逻辑右移，即最高位不论正负数永远补0。</p>
<p>不过JavaScript的无符号右移运算符<code>&gt;&gt;&gt;</code>还有一种巧妙的用法，这将在稍后揭晓。</p>
<p>但是位移运算符也是一种位运算符，由上一小节可知它也会存在强制转换为32位整数的问题。另外，所有位移运算符的右操作数在转换之后还会<strong>对32取模</strong>，因此<code>100 &gt;&gt;&gt; 32</code>等价于<code>100 &gt;&gt;&gt; 0</code>，<code>100 &gt;&gt;&gt; 33</code>等价于<code>100 &gt;&gt;&gt; 1</code>。这也解释了前文<code>low</code>等于<code>high</code>的原因。</p>
<blockquote>
<p>The right operand will be converted to an unsigned 32-bit integer and then taken modulo 32, so the actual shift offset will always be a positive integer between 0 and 31, inclusive.</p>
</blockquote>
<h3 id="unsigned类型"><code>unsigned</code>类型</h3>
<p>JavaScript是没有原生的<code>unsigned</code>类型的，但是注意到<code>MDN</code>对于无符号右移运算符描述的其中一句：</p>
<blockquote>
<p>This operation is also called &ldquo;zero-filling right shift&rdquo;, because the sign bit becomes 0, so the resulting number is always positive.</p>
</blockquote>
<p>可知无符号右移运算符的结果永远是一个正数（准确来说是非负整数）。因此可以用下面的操作来获得无符号整数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">x</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">0</span>
</span></span></code></pre></div><p>具体内容也可以看<a href="https://stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it">这篇回答</a>。</p>
<h2 id="解决方法">解决方法</h2>
<p>在JavaScript中，对于一个不超过<code>2^53 - 1</code>的64位非负整数，可以用以下简洁方法获取它的高32位和低32位：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">12345678901234</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">low</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">high</span> <span class="o">=</span> <span class="p">((</span><span class="nx">x</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">**</span> <span class="mi">32</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`low = </span><span class="si">${</span><span class="nx">low</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`high = </span><span class="si">${</span><span class="nx">high</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span></code></pre></div><p>如果超过了<code>2^53 - 1</code>，建议使用字符串、数组或者<code>BigInt</code>来解决。受限于篇幅，本文不会考虑给出其他解决方案（其实是懒hhhhhhh）</p>
<h2 id="总结">总结</h2>
<ul>
<li>JavaScript的<code>Number</code>类型本质上是双精度浮点数，它的最大安全整数是<code>2^53 - 1</code></li>
<li>JavaScript进行位运算时会将操作数强制转换为32位整数，超出的部分会被截断</li>
<li>JavaScript有三种位移运算符，分别是左移运算符<code>&lt;&lt;</code>、右移运算符<code>&gt;&gt;</code>和无符号右移运算符<code>&gt;&gt;&gt;</code></li>
<li>JavaScript在进行移位运算时，会先把右操作数对32取模</li>
<li>JavaScript的无符号右移运算符<code>&gt;&gt;&gt;</code>的结果一定是一个非负整数</li>
</ul>
<p>嗐，JavaScript玩得真花，我到现在都还是很想吐槽JavaScript的某些一言难尽的设计，哪怕出了ES6也还是X上雕花（JS党勿喷&gt;w&lt;）</p>
]]></content>
		</item>
		
		<item>
			<title>记录使用Clash for Windows时遇到Windows网络代理自动关闭的问题</title>
			<link>https://rc-kanashii.top/posts/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash-for-windows%E6%97%B6%E9%81%87%E5%88%B0windows%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E7%9A%84%E9%97%AE%E9%A2%98/</link>
			<pubDate>Sat, 01 Apr 2023 17:23:57 +0800</pubDate>
			
			<guid>https://rc-kanashii.top/posts/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash-for-windows%E6%97%B6%E9%81%87%E5%88%B0windows%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
			<description>说明 该解决方法来自知乎回答，本文章只是该回答的备份。 原文 问题已解决! 历时一个多月,终于把这个恶心的问题解决了!!! 而且很简单! 把注册表里的C</description>
			<content type="html"><![CDATA[<h2 id="说明">说明</h2>
<p>该解决方法来自<a href="https://www.zhihu.com/question/494780320/answer/2214286410">知乎回答</a>，本文章只是该回答的备份。</p>
<h2 id="原文">原文</h2>
<p>问题已解决!</p>
<p>历时一个多月,终于把这个恶心的问题解决了!!!</p>
<p>而且很简单!</p>
<p>把注册表里的Connections这个删除</p>
<p>完整路径:</p>
<pre tabindex="0"><code>HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Internet Settings/Connections
</code></pre><p>找到后把整个Connections文件夹删除!</p>
<p>据大佬说,问题的原因是:</p>
<p>&ldquo;IE代理服务器设置失效，比如勾选上了代理设置，或者改了代理服务器的端口，改好后关闭重新打开，发现没有更改设置。&rdquo;</p>
<p><a href="https://zhidao.baidu.com/question/2138620376445656748.html">高分悬赏！IE局域网设置 - 代理服务器 设置后保存不了！ 解决了保证再送100分！！_百度知道 (baidu.com)</a></p>
<p>作者：少年白马醉春风
链接：https://www.zhihu.com/question/494780320/answer/2214286410
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2 id="引用的百度知道问题">引用的“百度知道”问题</h2>
<h3 id="标题">标题</h3>
<p>高分悬赏！IE局域网设置 - 代理服务器 设置后保存不了！ 解决了保证再送100分！！</p>
<h3 id="描述">描述</h3>
<p>高分悬赏！IE局域网设置-代理服务器设置后保存不了每次重启就恢复了。怎么办？？？？解决了保证再送100分！！&hellip;</p>
<h3 id="回答">回答</h3>
<p>IE代理服务器设置失效，比如勾选上了代理设置，或者改了代理服务器的端口，改好后关闭重新打开，发现没有更改设置。</p>
<ol>
<li>
<p>在cmd运行窗口输入 regedit进入注册表</p>
</li>
<li>
<p>HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Internet Settings/Connections</p>
</li>
<li>
<p>把整个connections文件夹删除</p>
</li>
</ol>
<h3 id="作者">作者</h3>
<p><a href="https://zhidao.baidu.com/usercenter?uid=b5e54069236f25705e797129&amp;role=ugc">小明是一个传说</a></p>
]]></content>
		</item>
		
		<item>
			<title>Vue3&#43;Vite如何集成Mock.js</title>
			<link>https://rc-kanashii.top/posts/vue3&#43;vite%E5%A6%82%E4%BD%95%E9%9B%86%E6%88%90mockjs/</link>
			<pubDate>Sat, 01 Apr 2023 00:16:32 +0800</pubDate>
			
			<guid>https://rc-kanashii.top/posts/vue3&#43;vite%E5%A6%82%E4%BD%95%E9%9B%86%E6%88%90mockjs/</guid>
			<description>首先安装Mock.js： npm i mockjs 然后在src下新建mock目录，再在该目录下新建index.js，写入以下代码： import Mock from &amp;#39;mockjs&amp;#39;; Mock.mock(&amp;#39;http://localhost:8080/admin/login&amp;#39;, &amp;#39;post&amp;#39;, { msg: &amp;#34;200 OK&amp;#34; }) mock</description>
			<content type="html"><![CDATA[<p>首先安装<code>Mock.js</code>：</p>
<pre tabindex="0"><code>npm i mockjs
</code></pre><p>然后在<code>src</code>下新建<code>mock</code>目录，再在该目录下新建<code>index.js</code>，写入以下代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Mock</span> <span class="nx">from</span> <span class="s1">&#39;mockjs&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Mock</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="s1">&#39;http://localhost:8080/admin/login&#39;</span><span class="p">,</span> <span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">msg</span><span class="o">:</span> <span class="s2">&#34;200 OK&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>mock</code>的第一个参数是要拦截的URL。注意如果之前设置过<code>axios</code>的<code>baseURL</code>，那么此处要写出<strong>完整的</strong>URL（例如<code>http://localhost:8080/admin/login</code>）。如果没有设置过<code>baseURL</code>，可以直接简写成URL的后半部分（例如<code>/admin/login</code>）。</p>
<p><code>mock</code>的第二个参数表示请求方式，如果省略，说明拦截该URL的所有类型的请求。</p>
<p><code>mock</code>的第三个参数是要返回的数据，以<code>JSON</code>格式返回。</p>
<p>然后在项目入口文件（即<code>main.js</code>）中导入<code>mock</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="s1">&#39;./mock&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>最后在组件中正常使用<code>axios</code>发送请求即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/admin/login&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resp</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>菜鸡MyBatis Plus踩坑记录：Property &#39;sqlSessionFactory&#39; or &#39;sqlSessionTemplate&#39; are required</title>
			<link>https://rc-kanashii.top/posts/%E8%8F%9C%E9%B8%A1mybatis-plus%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Wed, 29 Mar 2023 00:14:40 +0800</pubDate>
			
			<guid>https://rc-kanashii.top/posts/%E8%8F%9C%E9%B8%A1mybatis-plus%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
			<description>前言 最近在准备做个划水的毕设，打算用MyBatis Plus简化一下CRUD操作。我直接复制了官网首页的这一串依赖： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-plus&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 然后简简单单弄个</description>
			<content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>最近在准备做个划水的毕设，打算用MyBatis Plus简化一下CRUD操作。我直接复制了<strong>官网首页</strong>的这一串依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.baomidou<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-plus<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.5.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>然后简简单单弄个User的entity：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Data</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@TableId</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="n">IdType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>弄个最简单的UserMapper：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Mapper</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="kd">extends</span> <span class="n">BaseMapper</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>再弄个简单到不行的LoginController：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectById</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>结果一运行，报了一个之前从未见过的错误：</p>
<pre tabindex="0"><code>org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;loginController&#39;: Unsatisfied dependency expressed through field &#39;userMapper&#39;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;userMapper&#39; defined in file [C:\JetBrainsProjects\IdeaProjects\springboot-vue-demo\target\classes\com\rc\springbootvuedemo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Property &#39;sqlSessionFactory&#39; or &#39;sqlSessionTemplate&#39; are required
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:660) ~[spring-beans-5.3.24.jar:5.3.24]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.24.jar:5.3.24]
	...
</code></pre><p>重点是这一句：</p>
<pre tabindex="0"><code>Property &#39;sqlSessionFactory&#39; or &#39;sqlSessionTemplate&#39; are required
</code></pre><p>我就纳闷了，之前MyBatis Plus用得好好地，怎么今天突然就报错了？</p>
<h2 id="所用依赖包">所用依赖包</h2>
<p>我这个项目毕竟只是个demo，使用的依赖包并不多：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MySQL --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MyBatis Plus --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.baomidou<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-plus<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.5.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Lombok --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.projectlombok<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>lombok<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>另外，根据官网文档的提示，我并没有额外引入MyBatis。</p>
<blockquote>
<p>注意：引入MyBatis-Plus之后请不要再次引入MyBatis以及MyBatis-Spring，以避免因版本差异导致的问题。</p>
</blockquote>
<h2 id="尝试解决">尝试解决</h2>
<p>网上很多文章说原因是MyBatis Plus版本过高，但是降级对我而言没有作用。</p>
<p>有的文章说是因为MyBatis Plus使用的是MybatisSqlSessionFactoryBean而非SqlSessionFactory，所以要自己配置前者，而且配置方法贼复杂。但是我印象里之前写项目的时候从来没有这么麻烦过，于是pass掉这个解决方法。</p>
<h2 id="最终解决方法">最终解决方法</h2>
<p>在网上浪费了2个小时之后，我又仔细阅读了一遍官方文档，结果发现<strong>官方首页</strong>和<strong>快速入门-&gt;安装</strong>中的依赖包<strong>不一致</strong>：
​
<img src="/img/20230329/1.png" alt="" title="首页的artifactId是mybatis-plus"></p>
<p>首页的artifactId是mybatis-plus</p>
<p><img src="/img/20230329/2.png" alt="" title="快速入门-&gt;安装的artifactId是mybatis-plus-boot-starter"></p>
<p>快速入门-&gt;安装的artifactId是mybatis-plus-boot-starter</p>
<p>我把artifactId改成mybatis-plus-boot-starter，即：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.baomidou<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-plus-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.5.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>之后，就可以正常运行了（注意：<strong>一定要写版本号</strong>，不然会找不到依赖包）。测试一下接口：
​
<img src="/img/20230329/3.png" alt=""></p>
<p>完美运行！</p>
<h2 id="总结">总结</h2>
<p>这次眼瞎的经历告诉我：一定、一定、一定要仔细阅读官方文档！</p>
<p>另外我很好奇mybatis-plus-boot-starter与mybatis-plus究竟有什么区别。官方首页跟文档里写得不一致，这不是完全坑小白吗TAT</p>
<h2 id="其他原因">其他原因</h2>
<p>刚才有个小伙伴私信告诉我用了上述方法仍未解决，我才想起来MyBatis Plus目前不兼容Spring Boot 3.x。解决方法是用Spring Boot 2.x。我自己用的是2.7.2，JDK17。</p>
<p>详情见：<a href="https://github.com/baomidou/mybatis-plus/issues/4971">https://github.com/baomidou/mybatis-plus/issues/4971</a></p>
]]></content>
		</item>
		
		<item>
			<title>换博客了</title>
			<link>https://rc-kanashii.top/posts/%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%BA%86/</link>
			<pubDate>Thu, 16 Mar 2023 11:33:45 +0800</pubDate>
			
			<guid>https://rc-kanashii.top/posts/%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%BA%86/</guid>
			<description>大三疫情的时候闲来无事，用Hexo搭了个博客。花了两三天折腾各种配置，结果发现搭完后才写了两篇test就再也没动过了TAT 后来换了台主机，之</description>
			<content type="html"><![CDATA[<p>大三疫情的时候闲来无事，用Hexo搭了个博客。花了两三天折腾各种配置，结果发现搭完后才写了两篇test就再也没动过了TAT</p>
<p>后来换了台主机，之前的源码也没有备份，博客就彻底废掉了……</p>
<p>昨天又心血来潮，用Hugo再搭个博客玩玩。事实证明Hugo不愧是用Go写的，搭建简单，支持热更新，比Hexo不知道快到哪里去了。</p>
<p>我发现可能大多数人搭博客之前都想先挑一个好看的主题，一不小心就把hugo的主题都翻完了，蹉跎掉2个小时，最后选了Hermit。</p>
<p>Hermit真的太戳我心了!缺点就是作者似乎已经放弃维护了，Github上都快三年没更新了，一堆issues没有解决。配置的时候发现Tags页面没有单独做样式，不太符合我的审美。等我先把前端学会，把Hugo文档看一看，再回来改改样式吧。</p>
]]></content>
		</item>
		
		<item>
			<title>测试</title>
			<link>https://rc-kanashii.top/posts/%E6%B5%8B%E8%AF%95/</link>
			<pubDate>Thu, 16 Mar 2023 00:21:14 +0800</pubDate>
			
			<guid>https://rc-kanashii.top/posts/%E6%B5%8B%E8%AF%95/</guid>
			<description>1 Hello, world! 1.1 asdfghjkl</description>
			<content type="html"><![CDATA[<h1 id="1">1</h1>
<p>Hello, world!</p>
<h2 id="11">1.1</h2>
<p>asdfghjkl</p>
]]></content>
		</item>
		
	</channel>
</rss>
